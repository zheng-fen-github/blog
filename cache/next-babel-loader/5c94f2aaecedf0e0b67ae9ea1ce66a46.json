{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Item from './item';\nconst Pagination = React.memo(({\n  codeList,\n  setCode,\n  type\n}) => {\n  const {\n    0: count,\n    1: setCount\n  } = useState(2);\n  const {\n    0: List,\n    1: setList\n  } = useState([]);\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      //     设置滚动事件        \n      scrollE();\n    });\n    return () => window.removeEventListener('scroll', scrollE);\n  }, [List]);\n  useEffect(() => {\n    //     设置初始数        \n    setList(codeList.slice(0, 8));\n  }, [codeList]);\n\n  const addList = () => {\n    setList(codeList.slice(0, count * 8));\n    setCount(pre => pre += 1);\n  };\n\n  let eventId = useRef();\n\n  const scrollE = () => {\n    //滚动事件定义        \n    if (eventId.current) return;\n    eventId.current = setTimeout(() => {\n      try {\n        let scrollCount = Math.round(window.pageYOffset + window.innerHeight);\n\n        if (scrollCount >= document.documentElement.scrollHeight - 2) {\n          document.getElementById('loadmore').click();\n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      eventId.current = null;\n    }, 500);\n  };\n\n  let typevalue = useCallback(type === 'JS' ? 'js' : type === 'React' ? 'react' : type === 'CSS' ? 'css' : type === 'HtmlBoostrap' ? 'boot' : null, [type]);\n  return __jsx(React.Fragment, null, List.map(e => __jsx(Item, {\n    setCode: setCode,\n    type: typevalue,\n    key: e._id,\n    message: e\n  })), __jsx(\"button\", {\n    onClick: addList,\n    id: \"loadmore\",\n    className: \"d-none\"\n  }, \"click\"));\n});\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}