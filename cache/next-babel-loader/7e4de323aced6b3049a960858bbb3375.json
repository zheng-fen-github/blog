{"ast":null,"code":"import { combineReducers } from 'redux';\n\nconst ContentReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ALL_CONTENT':\n      return action.data.map(e => {\n        e.filter = false;\n        return e;\n      });\n\n    case 'SHOW_CONTENT':\n      return state.map(e => {\n        e.filter = false;\n        return e;\n      });\n\n    case 'FILTER_CONTENT':\n      let result = state.map(e => {\n        if (e.ComponentType !== action.filterType) {\n          e.filter = true;\n        } else {\n          e.filter = false;\n        }\n\n        return e;\n      });\n      console.log(result);\n      return result;\n\n    case 'SEACTH_CONTENT':\n      let result2 = state.map(e => {\n        if (e.ComponentTitle.includes(action.title)) {\n          e.filter = false;\n        } else {\n          e.filter = true;\n        }\n\n        return e;\n      });\n      return result2;\n\n    default:\n      return state;\n  }\n};\n\nlet inisitalState = {\n  list: [],\n  loading: false\n};\n\nconst TypeReducer = (state = inisitalState, action) => {\n  switch (action.type) {\n    case 'GET_TYPE':\n      return Object.assign({}, state, {\n        list: action.list\n      });\n\n    case 'LADING_CONTENN':\n      return Object.assign({}, state, {\n        loading: action.loading\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst ComponentApp = combineReducers({\n  ContentReducer,\n  TypeReducer\n});\nexport default ComponentApp;","map":{"version":3,"sources":["C:/newlife/newSite/my-app/component/component/redux/reducer.js"],"names":["combineReducers","ContentReducer","state","action","type","data","map","e","filter","result","ComponentType","filterType","console","log","result2","ComponentTitle","includes","title","inisitalState","list","loading","TypeReducer","Object","assign","ComponentApp"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAE,EAAR,EAAWC,MAAX,KAAsB;AACzC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,aAAOD,MAAM,CAACE,IAAP,CAAYC,GAAZ,CAAgBC,CAAC,IAAI;AACxBA,QAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACA,eAAOD,CAAP;AACH,OAHM,CAAP;;AAIJ,SAAK,cAAL;AACI,aAAOL,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAI;AAClBA,QAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACA,eAAOD,CAAP;AACH,OAHM,CAAP;;AAIJ,SAAK,gBAAL;AACI,UAAIE,MAAM,GAAEP,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAI;AACxB,YAAIA,CAAC,CAACG,aAAF,KAAoBP,MAAM,CAACQ,UAA/B,EAA0C;AACrCJ,UAAAA,CAAC,CAACC,MAAF,GAAW,IAAX;AACJ,SAFD,MAEK;AACAD,UAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACJ;;AACD,eAAOD,CAAP;AACF,OAPW,CAAZ;AAQAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,aAAOA,MAAP;;AACJ,SAAK,gBAAL;AACI,UAAIK,OAAO,GAAEZ,KAAK,CAACI,GAAN,CAAUC,CAAC,IAAI;AACzB,YAAIA,CAAC,CAACQ,cAAF,CAAiBC,QAAjB,CAA2Bb,MAAM,CAACc,KAAlC,CAAJ,EAA8C;AACzCV,UAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACJ,SAFD,MAEK;AACAD,UAAAA,CAAC,CAACC,MAAF,GAAW,IAAX;AACJ;;AACD,eAAOD,CAAP;AACF,OAPY,CAAb;AAQA,aAAOO,OAAP;;AACJ;AACK,aAAOZ,KAAP;AAjCT;AAmCH,CApCD;;AAqCA,IAAIgB,aAAa,GAAG;AAChBC,EAAAA,IAAI,EAAC,EADW;AAEhBC,EAAAA,OAAO,EAAC;AAFQ,CAApB;;AAIA,MAAOC,WAAW,GAAG,CAACnB,KAAK,GAAEgB,aAAR,EAAsBf,MAAtB,KAAiC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,UAAL;AACI,aAAOkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,KAAlB,EAAyB;AAC5BiB,QAAAA,IAAI,EAAEhB,MAAM,CAACgB;AADe,OAAzB,CAAP;;AAGJ,SAAK,gBAAL;AACI,aAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,KAAlB,EAAyB;AAC5BkB,QAAAA,OAAO,EAAEjB,MAAM,CAACiB;AADY,OAAzB,CAAP;;AAGJ;AACK,aAAOlB,KAAP;AAVT;AAYH,CAbD;;AAkBA,MAAMsB,YAAY,GAAGxB,eAAe,CAAC;AACjCC,EAAAA,cADiC;AAEjCoB,EAAAA;AAFiC,CAAD,CAApC;AAME,eAAgBG,YAAhB","sourcesContent":["import { combineReducers } from 'redux'\r\nconst ContentReducer = (state =[],action) => {\r\n    switch(action.type) {        \r\n        case 'ALL_CONTENT':\r\n            return action.data.map(e => {\r\n                e.filter = false ;\r\n                return e ;\r\n            });\r\n        case 'SHOW_CONTENT':\r\n            return state.map(e => {\r\n                e.filter = false ;\r\n                return e ;\r\n            });\r\n        case 'FILTER_CONTENT':    \r\n            let result =state.map(e => {\r\n               if( e.ComponentType !== action.filterType){\r\n                    e.filter = true                   \r\n               }else{\r\n                    e.filter = false                   \r\n               }\r\n               return e;\r\n            });        \r\n            console.log(result)                    \r\n            return result;  \r\n        case 'SEACTH_CONTENT':    \r\n            let result2 =state.map(e => {\r\n               if( e.ComponentTitle.includes( action.title )){\r\n                    e.filter = false                   \r\n               }else{\r\n                    e.filter = true                   \r\n               }\r\n               return e;\r\n            });        \r\n            return result2;                     \r\n        default:\r\n             return state\r\n    }\r\n} \r\nlet inisitalState = {\r\n    list:[],\r\n    loading:false,\r\n}\r\nconst  TypeReducer = (state =inisitalState,action) => {\r\n    switch(action.type) {\r\n        case 'GET_TYPE':    \r\n            return Object.assign({}, state, {\r\n                list: action.list\r\n            })                                                                  \r\n        case 'LADING_CONTENN':    \r\n            return Object.assign({}, state, {\r\n                loading: action.loading\r\n            })                                                                      \r\n        default:\r\n             return state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst ComponentApp = combineReducers({\r\n    ContentReducer,\r\n    TypeReducer,\r\n  })\r\n\r\n\r\n  export default  ComponentApp"]},"metadata":{},"sourceType":"module"}