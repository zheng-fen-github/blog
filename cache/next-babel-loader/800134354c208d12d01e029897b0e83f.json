{"ast":null,"code":"import { combineReducers } from \"redux\";\n\nvar ContentReducer = function ContentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ALL_CONTENT\":\n      return action.data.map(function (e) {\n        e.filter = false;\n        return e;\n      });\n\n    case \"SHOW_CONTENT\":\n      return state.map(function (e) {\n        e.filter = false;\n        return e;\n      });\n\n    case \"FILTER_CONTENT\":\n      var result = state.map(function (e) {\n        if (e.ComponentType !== action.filterType) {\n          e.filter = true;\n        } else {\n          e.filter = false;\n        }\n\n        return e;\n      });\n      return result;\n\n    case \"SEACTH_CONTENT\":\n      var result2 = state.map(function (e) {\n        if (e.ComponentTitle.includes(action.title)) {\n          e.filter = false;\n        } else {\n          e.filter = true;\n        }\n\n        return e;\n      });\n      return result2;\n\n    default:\n      return state;\n  }\n};\n\nvar inisitalState = {\n  list: [],\n  loading: false\n};\n\nvar TypeReducer = function TypeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inisitalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_TYPE\":\n      return Object.assign({}, state, {\n        list: action.list\n      });\n\n    case \"LADING_CONTENN\":\n      return Object.assign({}, state, {\n        loading: action.loading\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar ComponentApp = combineReducers({\n  ContentReducer: ContentReducer,\n  TypeReducer: TypeReducer\n});\nexport default ComponentApp;","map":{"version":3,"sources":["C:/newlife/newSite/my-app/component/component/redux/reducer.js"],"names":["combineReducers","ContentReducer","state","action","type","data","map","e","filter","result","ComponentType","filterType","result2","ComponentTitle","includes","title","inisitalState","list","loading","TypeReducer","Object","assign","ComponentApp"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAOD,MAAM,CAACE,IAAP,CAAYC,GAAZ,CAAgB,UAACC,CAAD,EAAO;AAC5BA,QAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACA,eAAOD,CAAP;AACD,OAHM,CAAP;;AAIF,SAAK,cAAL;AACE,aAAOL,KAAK,CAACI,GAAN,CAAU,UAACC,CAAD,EAAO;AACtBA,QAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACA,eAAOD,CAAP;AACD,OAHM,CAAP;;AAIF,SAAK,gBAAL;AACE,UAAIE,MAAM,GAAGP,KAAK,CAACI,GAAN,CAAU,UAACC,CAAD,EAAO;AAC5B,YAAIA,CAAC,CAACG,aAAF,KAAoBP,MAAM,CAACQ,UAA/B,EAA2C;AACzCJ,UAAAA,CAAC,CAACC,MAAF,GAAW,IAAX;AACD,SAFD,MAEO;AACLD,UAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACD;;AACD,eAAOD,CAAP;AACD,OAPY,CAAb;AAQA,aAAOE,MAAP;;AACF,SAAK,gBAAL;AACE,UAAIG,OAAO,GAAGV,KAAK,CAACI,GAAN,CAAU,UAACC,CAAD,EAAO;AAC7B,YAAIA,CAAC,CAACM,cAAF,CAAiBC,QAAjB,CAA0BX,MAAM,CAACY,KAAjC,CAAJ,EAA6C;AAC3CR,UAAAA,CAAC,CAACC,MAAF,GAAW,KAAX;AACD,SAFD,MAEO;AACLD,UAAAA,CAAC,CAACC,MAAF,GAAW,IAAX;AACD;;AACD,eAAOD,CAAP;AACD,OAPa,CAAd;AAQA,aAAOK,OAAP;;AACF;AACE,aAAOV,KAAP;AAhCJ;AAkCD,CAnCD;;AAoCA,IAAIc,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAApB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAmC;AAAA,MAAlCjB,KAAkC,uEAA1Bc,aAA0B;AAAA,MAAXb,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,KAAlB,EAAyB;AAC9Be,QAAAA,IAAI,EAAEd,MAAM,CAACc;AADiB,OAAzB,CAAP;;AAGF,SAAK,gBAAL;AACE,aAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,KAAlB,EAAyB;AAC9BgB,QAAAA,OAAO,EAAEf,MAAM,CAACe;AADc,OAAzB,CAAP;;AAGF;AACE,aAAOhB,KAAP;AAVJ;AAYD,CAbD;;AAeA,IAAMoB,YAAY,GAAGtB,eAAe,CAAC;AACnCC,EAAAA,cAAc,EAAdA,cADmC;AAEnCkB,EAAAA,WAAW,EAAXA;AAFmC,CAAD,CAApC;AAKA,eAAeG,YAAf","sourcesContent":["import { combineReducers } from \"redux\";\r\nconst ContentReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ALL_CONTENT\":\r\n      return action.data.map((e) => {\r\n        e.filter = false;\r\n        return e;\r\n      });\r\n    case \"SHOW_CONTENT\":\r\n      return state.map((e) => {\r\n        e.filter = false;\r\n        return e;\r\n      });\r\n    case \"FILTER_CONTENT\":\r\n      let result = state.map((e) => {\r\n        if (e.ComponentType !== action.filterType) {\r\n          e.filter = true;\r\n        } else {\r\n          e.filter = false;\r\n        }\r\n        return e;\r\n      });\r\n      return result;\r\n    case \"SEACTH_CONTENT\":\r\n      let result2 = state.map((e) => {\r\n        if (e.ComponentTitle.includes(action.title)) {\r\n          e.filter = false;\r\n        } else {\r\n          e.filter = true;\r\n        }\r\n        return e;\r\n      });\r\n      return result2;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nlet inisitalState = {\r\n  list: [],\r\n  loading: false,\r\n};\r\nconst TypeReducer = (state = inisitalState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_TYPE\":\r\n      return Object.assign({}, state, {\r\n        list: action.list,\r\n      });\r\n    case \"LADING_CONTENN\":\r\n      return Object.assign({}, state, {\r\n        loading: action.loading,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst ComponentApp = combineReducers({\r\n  ContentReducer,\r\n  TypeReducer,\r\n});\r\n\r\nexport default ComponentApp;\r\n"]},"metadata":{},"sourceType":"module"}