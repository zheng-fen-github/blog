{"ast":null,"code":"var _jsxFileName = \"C:\\\\newlife\\\\newSite\\\\my-app\\\\component\\\\component\\\\Pagination.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Item from './item';\nconst Pagination = React.memo(({\n  codeList,\n  setCode,\n  type\n}) => {\n  const {\n    0: count,\n    1: setCount\n  } = useState(2);\n  const {\n    0: List,\n    1: setList\n  } = useState([]);\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      //     设置滚动事件        \n      scrollE();\n    });\n    return () => window.removeEventListener('scroll', scrollE);\n  }, [List]);\n  useEffect(() => {\n    //     设置初始数        \n    setList(codeList.slice(0, 8));\n  }, [codeList]);\n\n  const addList = () => {\n    setList(codeList.slice(0, count * 8));\n    setCount(pre => pre += 1);\n  };\n\n  let eventId = useRef();\n\n  const scrollE = () => {\n    //滚动事件定义        \n    if (eventId.current) return;\n    eventId.current = setTimeout(() => {\n      try {\n        let scrollCount = Math.round(window.pageYOffset + window.innerHeight);\n\n        if (scrollCount >= document.documentElement.scrollHeight - 2) {\n          document.getElementById('loadmore').click();\n        }\n      } catch (err) {\n        console.log(err);\n      }\n\n      eventId.current = null;\n    }, 500);\n  };\n\n  let typevalue = useCallback(type === 'JS' ? 'js' : type === 'React' ? 'react' : type === 'CSS' ? 'css' : type === 'HtmlBoostrap' ? 'boot' : null, [type]);\n  return __jsx(React.Fragment, null, List.map(e => __jsx(Item, {\n    setCode: setCode,\n    type: typevalue,\n    key: e._id,\n    message: e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 26\n    }\n  })), __jsx(\"button\", {\n    onClick: addList,\n    id: \"loadmore\",\n    className: \"d-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"click\"));\n});\nexport default Pagination;","map":{"version":3,"sources":["C:/newlife/newSite/my-app/component/component/Pagination.js"],"names":["React","useState","useEffect","useRef","useCallback","Item","Pagination","memo","codeList","setCode","type","count","setCount","List","setList","window","addEventListener","scrollE","removeEventListener","slice","addList","pre","eventId","current","setTimeout","scrollCount","Math","round","pageYOffset","innerHeight","document","documentElement","scrollHeight","getElementById","click","err","console","log","typevalue","map","e","_id"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef,useCallback} from 'react'\r\nimport Item from './item'\r\nconst Pagination =React.memo( ({codeList,setCode,type}) => {  \r\n    const [count, setCount] = useState(2);    \r\n    const [List, setList] = useState([]);   \r\n    useEffect(() => {                   \r\n        window.addEventListener('scroll',() => {      //     设置滚动事件        \r\n          scrollE();\r\n        })\r\n        return () => window.removeEventListener('scroll',scrollE)\r\n    },[List]) \r\n    useEffect(() => {               //     设置初始数        \r\n        setList(codeList.slice(0,8));        \r\n    },[codeList])\r\n    const addList = () => {                               \r\n        setList(codeList.slice(0,count*8)) \r\n        setCount(pre => pre += 1);       \r\n    }    \r\n    let eventId = useRef();    \r\n\r\n    const  scrollE  = () => {            //滚动事件定义        \r\n        if( eventId.current) return               \r\n        eventId.current = setTimeout(() => {              \r\n            try {         \r\n                let scrollCount =Math.round(window.pageYOffset + window.innerHeight)\r\n                if(scrollCount >= document.documentElement.scrollHeight-2) {                      \r\n                    document.getElementById('loadmore').click();\r\n            }}catch(err){\r\n                console.log(err)\r\n            }   \r\n            eventId.current = null; \r\n        },500)\r\n        \r\n    }  \r\n    let typevalue = useCallback(        \r\n        type === 'JS'?'js': type ==='React'? 'react':type === 'CSS'?'css':type === 'HtmlBoostrap'?'boot':null                     ,\r\n        [type],\r\n    )     \r\n    return (\r\n        <>\r\n          {List.map(e => <Item setCode={setCode} type={typevalue} key={e._id} message ={e}/> )}  \r\n          <button onClick={addList} id='loadmore' className='d-none'>click</button>                                 \r\n        </>\r\n    )\r\n})\r\n\r\nexport default Pagination\r\n"]},"metadata":{},"sourceType":"module"}